name: Terraform Apply/Destroy

on:
  workflow_dispatch:
    inputs:
      action:
        description: "apply or destroy"
        required: false
        default: "apply"
        type: choice
        options: [apply, destroy]
        
      project_name:
        description: "e.g. watanababy"
        required: true

      vpc_cidr:
        description: "e.g. 10.0.0.0/24"
        required: true

      public_subnet_cidrs:
        description: 'JSON array: ["10.0.0.0/28","10.0.0.16/28"]'
        required: true

      private_subnet_cidrs:
        description: 'JSON array: ["10.0.0.32/28","10.0.0.48/28"]'
        required: true

      allowed_ip:
        description: "e.g. 36.14.103.150/32"
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  TF_DIR: .

jobs:
  tf:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.event.inputs.aws_role_arn }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache .terraform
        uses: actions/cache@v4
        with:
          path: ./.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var='public_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.public_subnet_cidrs)) }}' \
            -var='private_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.private_subnet_cidrs)) }}' \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"

      - name: Terraform apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var='public_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.public_subnet_cidrs)) }}' \
            -var='private_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.private_subnet_cidrs)) }}' \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"

      - name: Show bastion public IP
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform output -raw bastion_public_ip

      - name: Terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform destroy -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var='public_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.public_subnet_cidrs)) }}' \
            -var='private_subnet_cidrs=${{ toJson(fromJSON(github.event.inputs.private_subnet_cidrs)) }}' \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"
