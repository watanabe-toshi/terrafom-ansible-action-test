name: Terraform Apply/Destroy

on:
  workflow_dispatch:
    inputs:
      action:
        description: "apply or destroy"
        required: false
        default: "apply"
        type: choice
        options: [apply, destroy]

      aws_role_arn:
        description: "AWS Role ARN for OIDC"
        required: true

      project_name:
        description: "Project name (e.g. watanababy)"
        required: true

      vpc_cidr:
        description: "VPC CIDR (e.g. 10.0.0.0/24)"
        required: true

      public_subnet_cidrs:
        description: "Public Subnets (1 per line)"
        required: true

      private_subnet_cidrs:
        description: "Private Subnets (1 per line)"
        required: true

      allowed_ip:
        description: "Allowed IP CIDR (e.g. 11.22.33.44/32)"
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  TF_DIR: .

jobs:
  tf:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.event.inputs.aws_role_arn }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache .terraform
        uses: actions/cache@v4
        with:
          path: ./.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Convert multiline inputs to JSON list
        id: cidr_lists
        shell: bash
        run: |
          to_json_list () {
            awk 'NF { gsub(/\r/,""); printf "%s\"%s\"", (NR==1?"[":","), $0 } END { print (NR>0?"]":"[]") }'
          }

          PUB=$(printf "%s" "${{ github.event.inputs.public_subnet_cidrs }}"  | to_json_list)
          PRI=$(printf "%s" "${{ github.event.inputs.private_subnet_cidrs }}" | to_json_list)

          echo "PUB=${PUB}" >> $GITHUB_OUTPUT
          echo "PRI=${PRI}" >> $GITHUB_OUTPUT

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var="public_subnet_cidrs=${{ steps.cidr_lists.outputs.PUB }}" \
            -var="private_subnet_cidrs=${{ steps.cidr_lists.outputs.PRI }}" \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"

      - name: Terraform apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var="public_subnet_cidrs=${{ steps.cidr_lists.outputs.PUB }}" \
            -var="private_subnet_cidrs=${{ steps.cidr_lists.outputs.PRI }}" \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"

      - name: Show bastion public IP
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform output -raw bastion_public_ip

      - name: Terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform destroy -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ github.event.inputs.project_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var="public_subnet_cidrs=${{ steps.cidr_lists.outputs.PUB }}" \
            -var="private_subnet_cidrs=${{ steps.cidr_lists.outputs.PRI }}" \
            -var="allowed_ip=${{ github.event.inputs.allowed_ip }}"
